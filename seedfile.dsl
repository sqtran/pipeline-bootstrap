def pipelineId = "${ PIPELINE_NAME ?: PROJECT_NAME }"

properties([
  parameters([
  string(name: 'PIPELINE_NAME', description: 'The name of the Jenkins Pipeline.  If this is blank, it will be set to whatever the Project Name is.'),
  string(name: 'OCP_NAMESPACE', defaultValue: 'steve-test3', description: 'The namespace to deploy this application to in the Openshift DEV environment.'),
  string(name: 'PROJECT_NAME', defaultValue: 'shiplify-mock-service', description: 'The name of this project in Openshift, within the namespace.'),
  string(name: 'GIT_URL', defaultValue: 'https://git.corp.odfl.com/od-dev/billing/location-type-update-service/shiplify-mock-service.git', description: 'Should be the URL of the project, not in git clone format.  Copy and paste the URL from the browser.'),
  string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'The branch to build.  Defaults to master branch.')
  ])
])

pipelineJob(pipelineId) {
  definition {
    cps {
      script(
"""@Library('PipelineBootstrap@master') _

node {
  def projectName = "$PROJECT_NAME"
  def gitProject = "$GIT_URL"
  def gitBranch = "$GIT_BRANCH"
  def ocpnamespace = "$OCP_NAMESPACE"

  def params = ['projectName' : projectName, 'ocpnamespace' : ocpnamespace]

  stage('Checkout') {
    // not good, but necessary until we fix our self-signed certificate issue
    //sh "git config http.sslVerify false"
    git branch: gitBranch, credentialsId: '6d8ed739-d67d-47f3-8194-c5f3f665da7d', url: gitProject

    params['gitDigest'] = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
  }

  new com.steve.ocp.Pipeline1().runPipeline(params)
}"""
      )
      sandbox()
    }

    description("This is an autogenerated pipeline\nPipeline Version 0.0.4")
  }
}
