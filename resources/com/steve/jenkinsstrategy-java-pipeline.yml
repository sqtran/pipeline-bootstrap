---
apiVersion: v1
kind: Template
labels:
  template: jenkinsstrategy-java-pipeline
metadata:
  annotations:
    description: "Application template for SpringBoot applications built using a Jenkins Pipeline"
    iconClass: icon-jenkins
    tags: "java,springboot,jenkins-ci"
    version: "1.0"
  name: jenkinsstrategy-java-pipeline
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: This is a Build Configuration.
      labels:
        app: ${APP_NAME}
        maker: jenkinsstrategy-java-pipeline
      name: ${APP_NAME}
    spec:
      failedBuildsHistoryLimit: 10
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      runPolicy: Serial
      source:
        type: None
      strategy:
        sourceStrategy:
          forcePull: true
          from:
            kind: ImageStreamTag
            name: openjdk18-openshift:latest
            namespace: openshift
      successfulBuildsHistoryLimit: 10
      triggers: []
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline
      name: "${APP_NAME}-pipeline"
    spec:
      failedBuildsHistoryLimit": 5
      nodeSelector: ~
      runPolicy: Serial
      source:
        git:
          ref: "${GIT_BRANCH}"
          uri: "${GIT_REPOSITORY}"
        sourceSecret:
          name: bitbucket-secret
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          env:
            - name: GIT_REPOSITORY
              value: "${GIT_REPOSITORY}"
            - name: GIT_BRANCH
              value: "${GIT_BRANCH}"
            - name: APP_NAME
              value: "${APP_NAME}"
            - name: BUILD_SECRET
              value: ${BUILD_SECRET}
          jenkinsfile: |-
              pipeline {
                  agent any
                  stages {
                      stage("Provision Agents") {
                        steps {
                          script {
                            openshift.withCluster() {
                              openshift.withProject(){
                                openshift.raw("apply -f https://raw.githubusercontent.com/sqtran/pipeline-bootstrap/dynamic-lib/resources/com/steve/jenkinsPodTemplate.yml")
                              }
                            }
                          }
                        }
                      }

                      stage("Load Scripts") {
                          agent {
                              label 'maven'
                          }
                          steps {
                              script {
                                git url: "https://github.com/sqtran/pipeline-bootstrap", branch: "dynamic-lib"
                                def code = load 'src/com/steve/ocp/DynamicLib.groovy'

                                def params = ['projectName' : "${APP_NAME}", 'gitBranch': "${GIT_BRANCH}", 'gitUrl': "${GIT_REPOSITORY}", 'gitSA': "${BUILD_SECRET}"]
                                code.process(params)
                              }
                          }
                      }
                  }
              }
        type: JenkinsPipeline
      successfulBuildsHistoryLimit: 5
      triggers:
        -
          imageChange: ~
          type: ImageChange
        -
          type: ConfigChange
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline
      name: "${APP_NAME}"
    spec:
      lookupPolicy:
        local: false

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: This is a Deployment Configuration.
      labels:
        app: ${APP_NAME}
        maker: jenkinsstrategy-java-pipeline
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentConfig: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          containers:
          - image: ${APP_NAME}
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
      - type: ConfigChange

parameters:
  -
    description: "Name of the deployable application."
    displayName: "Application Name"
    name: APP_NAME
    required: true
    value: name-of-application
  -
    description: "Name of the secret for Git credentials."
    displayName: "Build Secret"
    name: BUILD_SECRET
    required: true
    value: cicd-secret
  -
    description: "Git repository for source code."
    displayName: "Git Repo"
    name: GIT_REPOSITORY
    required: true
    value: "https://github.com/sqtran/spring-boot.git"
  -
    description: "Git repository branch to build app from"
    displayName: "Git Branch"
    name: GIT_BRANCH
    required: true
    value: ocp
