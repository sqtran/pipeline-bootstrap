---
apiVersion: v1
kind: Template
labels:
  template: jenkinsstrategy-java-pipeline-qa
metadata:
  annotations:
    description: "Application template for SpringBoot applications built using a Jenkins Pipeline"
    iconClass: icon-jenkins
    tags: "java,springboot,jenkins-ci"
    version: "1.0"
  name: jenkinsstrategy-java-pipeline-qa
objects:

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline-qa
      name: "${APP_NAME}-pipeline-qa"
    spec:
      failedBuildsHistoryLimit": 5
      nodeSelector: ~
      runPolicy: Serial
      source:
        git:
          ref: "${GIT_BRANCH}"
          uri: "${GIT_REPOSITORY}"
        sourceSecret:
          name: bitbucket-secret
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
              pipeline {
                  agent any
                  stages {
                      stage("Provision Agents") {
                        steps {
                          script {
                            openshift.withCluster() {
                              openshift.withProject(){
                                openshift.raw("apply -f https://raw.githubusercontent.com/sqtran/pipeline-bootstrap/dynamic-lib/resources/com/steve/jenkinsPodTemplate4x.yml")
                              }
                            }
                          }
                        }
                      }

                      stage("Load Scripts") {
                          agent {
                              label 'maven'
                          }
                          steps {
                              script {
                                git url: "https://github.com/sqtran/pipeline-bootstrap", branch: "dynamic-lib"
                                def code = load 'src/com/steve/ocp/DynamicLib.groovy'

                                def params = ['projectName' : "${APP_NAME}", 'image': "${IMAGE}", 'gitSA': "${BUILD_SECRET}", 'containerRegistry': "${CONTAINER_REGISTRY}", "containerRegistryApiKey": "${CONTAINER_REGISTRY_SECRET}"]
                                code.release(params)
                              }
                          }
                      }
                  }
              }
        type: JenkinsPipeline
      successfulBuildsHistoryLimit: 5

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline-qa
      name: "${APP_NAME}-pipeline-prd"
    spec:
      failedBuildsHistoryLimit": 5
      nodeSelector: ~
      runPolicy: Serial
      source:
        git:
          ref: "${GIT_BRANCH}"
          uri: "${GIT_REPOSITORY}"
        sourceSecret:
          name: bitbucket-secret
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
              pipeline {
                  agent any
                  stages {
                      stage("Provision Agents") {
                        steps {
                          script {
                            openshift.withCluster() {
                              openshift.withProject(){
                                openshift.raw("apply -f https://raw.githubusercontent.com/sqtran/pipeline-bootstrap/dynamic-lib/resources/com/steve/jenkinsPodTemplate4x.yml")
                              }
                            }
                          }
                        }
                      }

                      stage("Load Scripts") {
                          agent {
                              label 'maven'
                          }
                          steps {
                              script {
                                git url: "https://github.com/sqtran/pipeline-bootstrap", branch: "dynamic-lib"
                                def code = load 'src/com/steve/ocp/DynamicLib.groovy'

                                def params = ['projectName' : "${APP_NAME}", 'image': "${IMAGE}", 'gitSA': "${BUILD_SECRET}", 'containerRegistry': "${CONTAINER_REGISTRY}", "containerRegistryApiKey": "${CONTAINER_REGISTRY_SECRET}"]
                                code.promote(params)
                              } // end script
                          } // end steps
                      } // end stage
                  } // end stages
              } //end pipeline
        type: JenkinsPipeline
      successfulBuildsHistoryLimit: 5

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline-qa
      name: "${APP_NAME}"
    spec:
      lookupPolicy:
        local: false

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: This is a Deployment Configuration.
      labels:
        app: ${APP_NAME}
        maker: jenkinsstrategy-java-pipeline-qa
      name: ${APP_NAME}
    spec:
      replicas: 0
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentConfig: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          containers:
          - image: ${CONTAINER_REGISTRY}/cicd/${IMAGE}
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
          terminationGracePeriodSeconds: 75

parameters:
  -
    description: "Name of the deployable application."
    displayName: "Application Name"
    name: APP_NAME
    required: true
    value: name-of-application
  -
    description: "Image to deploy into QA, should come from Artifactory with :deploy tag"
    displayName: "QA Image"
    name: IMAGE
    required: true
    value: <appname>:deploy
  -
    description: "Name of the secret for Git credentials."
    displayName: "Build Secret"
    name: BUILD_SECRET
    required: true
    value: cicd-secret
  -
    description: "Name of the secret for External Registry credentials."
    displayName: "External Registry Secret"
    name: CONTAINER_REGISTRY_SECRET
    required: true
    value: artifactory-secret
  -
    description: "External container Registry for promotions."
    displayName: "External Container Registry"
    name: CONTAINER_REGISTRY
    required: true
    value: "docker-repo.build-repo.steve.com"
