---
apiVersion: v1
kind: Template
metadata:
  annotations:
    description: "Application template for SpringBoot applications built using an ephemeral Jenkins Pipeline"
    iconClass: icon-jenkins
    openshift.io/display-name: JenkinsStrategy Java Pipeline for PROD
    template.openshift.io/bindable: "false"
    tags: "java,springboot,jenkins-ci,jenkins"
    version: "1.0"
  name: jenkinsstrategy-java-pipeline-prod
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline-prod
      name: "${APP_NAME}-pipeline-prod"
    spec:
      failedBuildsHistoryLimit": 5
      nodeSelector: ~
      runPolicy: Serial
      source:
        git:
          ref: "${GIT_BRANCH}"
          uri: "${GIT_REPOSITORY}"
        sourceSecret:
          name: bitbucket-secret
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
              pipeline {
                agent any
                stages {
                  stage("Initialize") {
                    steps {
                      script {

                        git url: "https://github.com/sqtran/pipeline-bootstrap", branch: "dynamic-lib"
                        def code = load 'src/com/steve/ocp/EntryLibrary.groovy'

                        def params = ['workflow': 'production', 'projectName' : "${APP_NAME}", 'gitBranch': "${GIT_BRANCH}", 'gitUrl': "${GIT_REPOSITORY}", 'gitSA': "${BUILD_SECRET}"]
                        code.initialize(params)
                      }
                    }
                  }
                }
              }
        type: JenkinsPipeline
      successfulBuildsHistoryLimit: 5

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline-prod
      name: "${APP_NAME}"
    spec:
      lookupPolicy:
        local: false

  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: This is a service.
      labels:
        app: ${APP_NAME}
        maker: jenkinsstrategy-java-pipeline-prod
      name: ${APP_NAME}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: 8443-tcp
        port: 8443
        protocol: TCP
        targetPort: 8443
      - name: 8778-tcp
        port: 8778
        protocol: TCP
        targetPort: 8778
      selector:
        deploymentConfig: ${APP_NAME}

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: This is a Deployment Configuration.
      labels:
        app: ${APP_NAME}
        maker: jenkinsstrategy-java-pipeline-prod
      name: ${APP_NAME}
    spec:
      replicas: 0
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentConfig: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          containers:
          - image: ${CONTAINER_REGISTRY}/cicd/${APP_NAME}:${IMAGE_TAG}
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
          terminationGracePeriodSeconds: 75

parameters:
  -
    description: "Name of the deployable application."
    displayName: "Application Name"
    name: APP_NAME
    required: true
    value: name-of-application
  -
    description: "Name of the secret for Git credentials."
    displayName: "Build Secret"
    name: BUILD_SECRET
    required: true
    value: cicd-secret
  -
    description: "Name of the secret for External Registry credentials."
    displayName: "External Registry Secret"
    name: CONTAINER_REGISTRY_SECRET
    required: true
    value: artifactory-secret
  -
    description: "External container Registry for promotions."
    displayName: "External Container Registry"
    name: CONTAINER_REGISTRY
    required: true
    value: "docker-repo.build-repo.steve.com"
  -
    description: "Image Tag to deploy into QA, this must be available in your Container Registry."
    displayName: "QA Image Tag"
    name: IMAGE_TAG
    required: true
    value: deploy
